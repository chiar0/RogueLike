DOCUMENTATION //Fabio
Ogni livello è un nodo della struttura level, una lista dinamica bilaterale che raccoglie nei campi dati necessari alla rappresentazione/manipolazione del dungeon,
inclusi i nemici in quanto legati solo ad uno specifico livello. Al suo interno troviamo un puntatore a una struttura WINDOW che rappresenta il dungeon del livello.
La struttura WINDOW è dichiarata in ncurses.h e contiene i dati necessari alla visualizzazione della finestra sul terminale. Va posta particolare attenzione alla libreria ncurses.h in quanto alcune funzioni non funzionano a dovere ed altre sono assenti di documentazione. Per aggiornare il dungeon utlizzo una funzione ausiliaria creata nella classe game: void game::dungeon_refresh(), in quanto il wrefresh di ncurses non funziona correttamente in determinati casi, in cui per risolvere utilizzo un altra funzione di ncurses chiamata touchwin che segna come "elemento modificato" ogni coordinata della mappa. Nella struttura si trova un numero assegnato al dungeon, parte da zero verso infinito. Ogni volta che viene creato un livello gli viene dato il numero del precedente incrementato di uno, così fino a che il giocatore muore o il programma finisce la memoria allocata e si blocca. La struttura level si trova in misc.hpp e i campi sono impiegati in diverse classi tra cui game.cpp. Il costruttore della classe crea la testa della nostra lista di livelli che andremo a scorrere in avanti e indietro quando il giocatore entrerà nelle porte. Il numero della testa corrisponde al livello zero nel quale la porta d'ingresso non c'è e quella d'uscita viene generata casualmente sulle 4 pareti. La testa della lista non la salvo il quanto non è utile al fine del gioco, ci serve solo un puntatore al livello corrente. La porta d'uscita è l'unica che viene generata casualmente infatti quella d'ingresso è sempre generata specualare a quella d'uscita del livello precedente. Nelle funzioni di generazione casuale utilizzo delle tecniche di controllo per evitare una serie di bachi.
Ci sono 4 direzioni (N=0, S=1, W=2, E=3) e durante la creazione della porta d'uscita ne viene scelta una casuale, diversa dalla direzione della porta d'entrata.
In caso di uguaglianza il programma scorre alla direzione successiva evitando guai. In base alla direzione scelta si andrà a generare una porta di coordinate casuali
sulla parete corrispondente. Il fattore "casuale" è pseudo-implementato dalla libreria "cstdlib" e la sua funzione rand che ritorna un numero casuale. Il generatore dei numeri casuali ha bisogno di un numero base detto seme e glielo passiamo tramite la funzione srand, nel nostro caso utilizzo la funzione time della libreria ctime che ritorna l'ora corrente. La porta d'uscita è l'unica che viene generata casualmente mentre quella d'ingresso è generata specualare a quella d'uscita del livello precedente. le funzioni: WINDOW *game::retrive_current_dungeon(); level *game::retrive_current_level(); ritornano puntatori al dungeon e al livello corrente. La scoreboard è una finestra separata dal dungeon.


--- Settori ---
  - Gestione delle classi   (calcolo dei danni, powerup, artefatti, interazioni con la mappa, muri, messaggi di errori, sistema di punteggio)
  - Gestione del main       (rapportare ogni elemento della componente grafica al relativo codice)
  - Gestione del menù       (bordi mappa, icona del personaggio, hitbox, colpi a distanza)

--- Idee ---
Menù principale   (aggiunta di opzione)
Difficoltà        (esempi: meno vita, nemici più forti, più nemici)
Risoluzione       (idea: 80x25)

--- Divide et Impera ---
Creazione del menù
Classe personaggio
Classe nemico
Classe artefatto
Interazione combattimento
Interazione con artefatti / porte
